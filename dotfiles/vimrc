if &compatible
    set nocompatible
endif

" dein.vim {{{
set runtimepath+=~/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.vim/bundles')
    call dein#begin('~/.vim/bundles')

    " Let dein manage dein
    call dein#add('~/.vim/bundles/repos/github.com/Shougo/dein.vim')

    " Solarized
    call dein#add('altercation/vim-colors-solarized')

    " Language-specific
    call dein#add('pangloss/vim-javascript')
    call dein#add('tpope/vim-rails')
    " Highlights matching HTML tag when cursor is on a tag
    call dein#add('gregsexton/MatchTag')
    " tab-complete Python code
    call dein#add('rkulla/pydiction')
    " pylint/rope/pyflakes/pep8/etc integration
    call dein#add('klen/python-mode')
    call dein#add('fatih/vim-go')
    call dein#add('vim-latex/vim-latex')
    "call dein#add('vim-pandoc/vim-pandoc')
    "call dein#add('vim-pandoc/vim-pandoc-syntax')
    call dein#add('jplaut/vim-arduino-ino')

    " Git integration
    call dein#add('tpope/vim-fugitive')
    " Add ending keyword for certain structures in certain languages
    call dein#add('tpope/vim-endwise')

    " Syntax checking
    call dein#add('vim-syntastic/syntastic')
    " Fuzzy-search completion engine
    " Set up with ./install.py
    "   --clang-completer for C-family languages
    "   --gocode-completer for Go
    "   --tern-completer for JS (requires Node + npm)
    call dein#add('Valloric/YouCompleteMe')
    " Visualize vim undo tree
    call dein#add('sjl/gundo.vim')
    " Filesystem, buffer explorer
    call dein#add('sjbach/lusty')
    " Alignment plugin
    call dein#add('junegunn/vim-easy-align')
    " Status/tabline
    call dein#add('bling/vim-airline')
    " Highlight trailing whitespace
    call dein#add('bronson/vim-trailing-whitespace')

    call dein#end()
    call dein#save_state()
endif

filetype plugin indent on

" If you want to install not installed plugins on startup.
"if dein#check_install()
"  call dein#install()
"endif
" }}}

" Colors {{{
syntax enable

" Solarized
set background=light
let g:solarized_contrast="high"
colorscheme solarized
" }}}

" Spaces and Tabs {{{
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces
set shiftwidth=4    " sets >>, <<, == behavior; also affects autoindent

set nosmartindent   " automatically inserts one extra level of indentation in
                    " some cases, but interferes with some plugins, so this is
                    " disabled

set autoindent      " copy indentation from previous line when starting new line
" }}}

" Editing behavior {{{
set textwidth=80    " constrain to 80-character lines
set backspace=2     " Enable backspace to delete from insertion point

" Get rid of trailing whitespace in certain files
autocmd FileType c,cpp,cc,html,css,py,hs,js,clj autocmd BufWritePre <buffer> :%s/\s\+$//e
" }}}

" UI Layout {{{
set number          " show line numbers
set showcmd         " Show current command on status bar
set cursorline      " highlight current line
" CursorLine by default is underline. We want background highlight. This is
" dark grey. To be used in conjunction with solarized.
" Strangely enough, with Neovim + dein.vim, this does the opposite of what I
" want
"highlight CursorLine ctermbg=8 cterm=NONE
set ruler           " tells us line and column number (lower right)
set colorcolumn=80  " Show 80-character column

set wildmenu    " visual autocomplete for command menu
set lazyredraw  " redraw only when we need to

set showmatch   " highlight matching [{()}]
" }}}

" Searching {{{
set incsearch   " search as characters are entered
set hlsearch    " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
nnoremap <F9> :nohlsearch<CR>

set ignorecase  " case-insensitve search
set smartcase   " if there is a capital letter, then do case-sensitive search
" }}}

" Folding {{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default (excl very nested ones)
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level
" }}}

" Line shortcuts {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" highlight last inserted text
nnoremap gV `[v`]
" }}}

" Tmux {{{
" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

" Backups {{{
" Enable backup support
set backup
set writebackup
" Place backup/swp files somewhere else
set backupdir=~/.vimtmp/backup
set dir=~/.vimtmp/swp
" }}}

" Misc {{{
" Ignore these files when tabbing
set wildignore=*.o,*.pyc,*.hi,*.swp,*.class

" Sane splitting behavior
set splitbelow
set splitright

set modelines=1 " Allow running vim commands embedded as comments

set hidden  " enable buffers with unsaved edits not displayed in a window

" Ctags (doesn't ever seem to make a difference...)
let Tlist_Ctags_Cmd="/usr/bin/ctags"
" }}}

" Autocompletion {{{
" comes with vim
set omnifunc=syntaxcomplete#Complete

" Python-specific, plugin required
let g:pymode_rope_complete_on_dot=0
let g:pydiction_location='~/.vim/bundle/pydiction/complete-dict'
" }}}

" Language specific autocmd {{{
function DGSetIndent(spaces)
    """ Sets indentation. """
    let &tabstop=a:spaces
    let &softtabstop=a:spaces
    let &shiftwidth=a:spaces
endfunction

augroup lang_setup
    autocmd!

    " Autocompletions {{{
    autocmd Filetype css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd Filetype html setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd Filetype javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd Filetype python setlocal omnifunc=pythoncomplete#Complete
    " }}}

    " Indentation {{{
    autocmd Filetype c          call DGSetIndent(4)
    autocmd Filetype css        call DGSetIndent(2)
    autocmd Filetype haskell    call DGSetIndent(2)
    autocmd Filetype html       call DGSetIndent(2)
    autocmd Filetype jade       call DGSetIndent(2)
    autocmd Filetype javascript call DGSetIndent(2)
    autocmd Filetype ocaml      call DGSetIndent(2)
    autocmd Filetype php        call DGSetIndent(2)
    autocmd Filetype ruby       call DGSetIndent(2)
    autocmd Filetype tex        call DGSetIndent(4)
    autocmd Filetype verilog    call DGSetIndent(3)

    autocmd Filetype c setlocal cindent

    autocmd Filetype c setlocal smarttab
    autocmd Filetype ruby setlocal nosmartindent
    autocmd Filetype python setlocal nosmartindent
    autocmd BufRead *.py setlocal nosmartindent
    " }}}

    " Text width {{{
    autocmd Filetype gitcommit setlocal tw=72
    autocmd Filetype markdown setlocal tw=80
    " }}}

    " ¯\_(ツ)_/¯ {{{
    autocmd Filetype html setlocal indentkeys-=*<Return>
    autocmd Filetype php setlocal indentkeys-=*<Return>
    " }}}

augroup END
" }}}

" vim-airline {{{
set ttimeoutlen=50
set laststatus=2
set encoding=utf-8
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
" }}}

" Plugin settings {{{
let g:pymode_lint_checker = 'pyflakes,mccabe'
let g:pymode_lint_ignore = 'E501,C0110'

" Arduino
let g:vim_arduino_auto_open_serial = 1

" LaTeX settings
let g:tex_flavor='latex'

" Syntastic
" HTML checker is super annoying
let syntastic_mode_map = { 'passive_filetypes': ['html'] }

" Gundo keyboard remappings
nnoremap <F5> :GundoToggle<CR>
nnoremap <leader>u :GundoToggle<CR>
" }}}

" :YcmForceCompileAndDiagnostics
nnoremap <S-F5> :YcmForceCompileAndDiagnostics<CR>

" vimrc setup inspired by https://dougblack.io/words/a-good-vimrc.html
" vim:foldmethod=marker:foldlevel=0
